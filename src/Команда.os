//////////////////////////////////////////////////////////////////////////
// Работа с командными файлами

#Использовать logos
#Использовать asserts

Перем Приложение;
Перем Параметры;
Перем РабочийКаталог;
Перем ВыводКоманды;
Перем КодировкаВывода;
Перем КодВозврата;

Перем ЭтоWindows;
Перем Лог;

// Выполнение произвольной команды
//
//  Возвращаемое значение:
//   Число - код возврата команды
//
Функция Исполнить() Экспорт
    
    ПроверитьВозможностьВыполненияКоманды();
    
    КодВозврата = ЗапуститьИПодождать(Приложение, Параметры);
	Лог.Отладка("Код возврата равен %1", КодВозврата);
    Возврат КодВозврата;

КонецФункции

// Установить путь команды.
//
//  Параметры:
//   ПутьКоманды - Путь команды (Строка)
//
Процедура УстановитьКоманду(Знач ПутьКоманды) Экспорт
	Приложение = ПутьКоманды;
КонецПроцедуры // УстановитьКоманду()

// Получить путь команды.
//
//  Возвращаемое значение:
//   Строка - Путь команды
//
Функция ПолучитьКоманду() Экспорт
    Возврат Приложение;
КонецФункции

// Добавить параметр команды.
//
//  Параметры:
//   Строка - новый единичный параметр или все параметы в одной строке 
//
Процедура ДобавитьПараметр(Знач Параметр) Экспорт
	Параметры.Добавить(Параметр);
КонецПроцедуры // УстановитьКоманду()

// Получить вывод выполненной команды.
//
//  Возвращаемое значение:
//   Строка - Вывод команды
//
Функция ПолучитьВывод() Экспорт
    Возврат ВыводКоманды;
КонецФункции

// Получить код возврата выполненной команды.
//
//  Возвращаемое значение:
//   Число - код возврата команды
//
Функция ПолучитьКодВозврата() Экспорт
    Возврат КодВозврата;
КонецФункции

// Установить кодировку вывода для выполнения команды.
//
//  Параметры:
//   Строка - кодировка вывода
//
Процедура УстановитьКодировкуВывода(Знач НоваяКодировкаВывода) Экспорт
    КодировкаВывода = НоваяКодировкаВывода;
КонецПроцедуры

// Получить кодировка вывода выполняемой команды.
//
//  Возвращаемое значение:
//   Строка - кодировка вывода команды
//
Функция ПолучитьКодировкуВывода() Экспорт
    Возврат КодировкаВывода;
КонецФункции

// Получить текущий рабочий каталог.
//
//  Возвращаемое значение:
//   Строка - Путь к рабочему каталогу
//
Функция ПолучитьРабочийКаталог() Экспорт
    Возврат РабочийКаталог;
КонецФункции

// Оборачивает переданную строку в кавычки, если она еще не обернута.
//
// Параметры:
//   Строка - Строка - Входящая строка
//
//  Возвращаемое значение:
//   Строка - Строка, обернутая в кавычки
//
Функция ОбернутьВКавычки(Знач Строка) Экспорт
    
    Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
        Возврат Строка;
    Иначе
        Возврат """" + Строка + """";
    КонецЕсли;
    
КонецФункции

//////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

// Установить вывод последней выполненной команды.
//
// Параметры:
//   Сообщение - Строка - Вывод команды
//
Процедура УстановитьВывод(Знач Сообщение)
    ВыводКоманды = Сообщение;
КонецПроцедуры

// Проверяет возможность выполнить команду.
//
Процедура ПроверитьВозможностьВыполненияКоманды()
    
    Ожидаем.Что(ПолучитьРабочийКаталог(), "Рабочий каталог не установлен.").Заполнено();
    
    Лог.Отладка("РабочийКаталог: " + ПолучитьРабочийКаталог());
    
КонецПроцедуры

// Запустить команду в операционной системе с ожиданием ее выполнения 
//
// Параметры:
//   Параметры - Массив - Массив строковых аргументов, передаваемых в командную
//		строку. Добавляются после исполняемого файла.
//
//  Возвращаемое значение:
//   Число - Код возврата приложения
//
Функция ЗапуститьИПодождать(Знач ПутьПриложения, Знач Параметры)
    
    СтрокаЗапуска = "";
    СтрокаДляЛога = "";
    Для Каждого Параметр Из Параметры Цикл
        
        СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
        
        Если Лев(Параметр, 2) <> "/P" и Лев(Параметр, 25) <> "/ConfigurationRepositoryP" Тогда
            СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
        КонецЕсли;
        
    КонецЦикла;
    
    Приложение = ПутьПриложения;
    Если Найти(Приложение, " ") > 0 Тогда
    	Приложение = ОбернутьВКавычки(Приложение);
    КонецЕсли;
    Лог.Отладка("СтрокаЗапуска <%1>", Приложение + СтрокаДляЛога);
    
    // Если ЭтоWindows = Ложь Тогда 
    //     СтрокаЗапуска = "sh -c '" + Приложение + СтрокаЗапуска + "'";
    // Иначе
        СтрокаЗапуска = Приложение + СтрокаЗапуска;
    // КонецЕсли;
    
    ЗаписьXML = Новый ЗаписьXML();
    ЗаписьXML.УстановитьСтроку();
    
    Процесс = СоздатьПроцесс(СтрокаЗапуска, РабочийКаталог, Истина, Истина, КодировкаВывода);
    Процесс.Запустить();
    
    Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные Цикл
        СтрокаВывода = "" + Процесс.ПотокВывода.ПрочитатьСтроку() + Символы.ПС;
        ЗаписьXML.ЗаписатьБезОбработки(СтрокаВывода);
    КонецЦикла;

    РезультатРаботыПроцесса = ЗаписьXML.Закрыть();
    УстановитьВывод(РезультатРаботыПроцесса);
    
    Возврат Процесс.КодВозврата;
    
КонецФункции

// Инициализация работы библиотеки.
// Задает минимальные настройки.
//
Процедура Инициализация()
    
    Лог = Логирование.ПолучитьЛог("oscript.lib.commands");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	РабочийКаталог = ".";
	ВыводКоманды = "";
    КодировкаВывода = КодировкаТекста.UTF8;
	Параметры = Новый Массив;
        
КонецПроцедуры

Инициализация();
