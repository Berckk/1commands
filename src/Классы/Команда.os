//////////////////////////////////////////////////////////////////////////
// Работа с командными файлами

#Использовать logos
#Использовать asserts

Перем мПриложение;
Перем мПараметры;
Перем мРабочийКаталог;
Перем мВыводКоманды;

Перем ЭтоWindows;
Перем Лог;

// Выполнение произвольной команды
//
Процедура Выполнить() Экспорт
    
    ПроверитьВозможностьВыполненияКоманды();
    
    КодВозврата = ЗапуститьИПодождать(мПриложение, мПараметры);
    // Если КодВозврата <> 0 Тогда
    //     Лог.Ошибка("Получен ненулевой код возврата "+КодВозврата+". Выполнение скрипта остановлено!");
    //     ВызватьИсключение ПолучитьВывод();
    // Иначе
    //     Лог.Отладка("Код возврата равен 0");
    // КонецЕсли;
	Лог.Отладка("Код возврата равен %1", КодВозврата);
    
КонецПроцедуры

// Установить путь команды.
//
//  Параметры:
//   ПутьКоманды - Путь команды (Строка)
//
Процедура УстановитьКоманду(Знач ПутьКоманды) Экспорт
	мПриложение = ПутьКоманды;
КонецПроцедуры // УстановитьКоманду()

// Получить путь команды.
//
//  Возвращаемое значение:
//   Строка - Путь команды
//
Функция ПолучитьКоманду() Экспорт
    Возврат мПриложение;
КонецФункции

// Получить вывод выполненной команды.
//
//  Возвращаемое значение:
//   Строка - Вывод команды
//
Функция ПолучитьВывод() Экспорт
    Возврат мВыводКоманды;
КонецФункции

// Получить текущий рабочий каталог.
//
//  Возвращаемое значение:
//   Строка - Путь к рабочему каталогу
//
Функция ПолучитьРабочийКаталог() Экспорт
    Возврат мРабочийКаталог;
КонецФункции

//////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

// Установить вывод последней выполненной команды.
//
// Параметры:
//   Сообщение - Строка - Вывод команды
//
Процедура УстановитьВывод(Знач Сообщение)
    мВыводКоманды = Сообщение;
КонецПроцедуры

// Проверяет возможность выполнить команду.
//
Процедура ПроверитьВозможностьВыполненияКоманды()
    
    Ожидаем.Что(ПолучитьРабочийКаталог(), "Рабочий каталог не установлен.").Заполнено();
    
    Лог.Отладка("РабочийКаталог: " + ПолучитьРабочийКаталог());
    
КонецПроцедуры

// Запустить команду в операционной системе с ожиданием ее выполнения 
//
// Параметры:
//   Параметры - Массив - Массив строковых аргументов, передаваемых в командную
//		строку. Добавляются после исполняемого файла.
//
//  Возвращаемое значение:
//   Число - Код возврата приложения
//
Функция ЗапуститьИПодождать(Знач ПутьПриложения, Знач Параметры)
    
    СтрокаЗапуска = "";
    СтрокаДляЛога = "";
    Для Каждого Параметр Из Параметры Цикл
        
        СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
        
        Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
            СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
        КонецЕсли;
        
    КонецЦикла;
    
    Приложение = ОбернутьВКавычки(ПутьПриложения);
    Лог.Отладка(Приложение + СтрокаДляЛога);
    
    // Если ЭтоWindows = Ложь Тогда 
    //     СтрокаЗапуска = "sh -c '" + Приложение + СтрокаЗапуска + "'";
    // Иначе
        СтрокаЗапуска = Приложение + СтрокаЗапуска;
    // КонецЕсли;
    
    ЗаписьXML = Новый ЗаписьXML();
    ЗаписьXML.УстановитьСтроку();
    
    Процесс = СоздатьПроцесс(СтрокаЗапуска, мРабочийКаталог, Истина, Истина, КодировкаТекста.UTF8);
    Процесс.Запустить();
    
    Пока НЕ Процесс.Завершен ИЛИ Процесс.ПотокВывода.ЕстьДанные Цикл
        СтрокаВывода = "" + Процесс.ПотокВывода.ПрочитатьСтроку() + Символы.ПС;
		// Лог.Отладка("СтрокаВывода %1", СтрокаВывода);
        ЗаписьXML.ЗаписатьБезОбработки(СтрокаВывода);
    КонецЦикла;
    
    // Если Процесс.КодВозврата <> 0 Тогда
    //     Лог.Ошибка("Код возврата: " + Процесс.КодВозврата);
    //     ТекстВывода = Процесс.ПотокОшибок.Прочитать();
	// 	Если ПустаяСтрока(ТекстВывода) Тогда
	// 		ТекстВывода = ЗаписьXML.Закрыть();
	// 	КонецЕсли;
    //     УстановитьВывод(ТекстВывода);
    //     ВызватьИсключение ТекстВывода;
    // КонецЕсли;
    
    РезультатРаботыПроцесса = ЗаписьXML.Закрыть();
    УстановитьВывод(РезультатРаботыПроцесса);
    
    Возврат Процесс.КодВозврата;
    
КонецФункции

// Оборачивает переданную строку в кавычки, если она еще не обернута.
//
// Параметры:
//   Строка - Строка - Входящая строка
//
//  Возвращаемое значение:
//   Строка - Строка, обернутая в кавычки
//
Функция ОбернутьВКавычки(Знач Строка)
    
    Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
        Возврат Строка;
    Иначе
        Возврат """" + Строка + """";
    КонецЕсли;
    
КонецФункции

// Инициализация работы библиотеки.
// Задает минимальные настройки.
//
Процедура Инициализация()
    
    Лог = Логирование.ПолучитьЛог("oscript.lib.commands");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	мРабочийКаталог = ".";
	мВыводКоманды = "";
	мПараметры = Новый Массив;
        
КонецПроцедуры

Инициализация();

