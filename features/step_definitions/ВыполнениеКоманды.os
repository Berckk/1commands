// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

#Использовать asserts

#Использовать "../.."

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯВключаюОтладкуБиблиотеки");
	ВсеШаги.Добавить("ЯВыполняюКоманду");
	ВсеШаги.Добавить("ВыводКомандыСодержит");
	ВсеШаги.Добавить("ЯВыключаюОтладкуБиблиотеки");
	ВсеШаги.Добавить("ЯДобавляюПараметрДляКоманды");
	ВсеШаги.Добавить("ЯСообщаюВыводКоманды");
	ВсеШаги.Добавить("КодВозвратаКомандыРавен");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры

//Я выполняю команду "git"
Процедура ЯВыполняюКоманду(Знач ТекстПроизвольнойКоманды) Экспорт
	
	Команда = БДД.ПолучитьИзКонтекста("Команда");
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Команда = Новый Команда;
	КонецЕсли;
	Команда.УстановитьКоманду(ТекстПроизвольнойКоманды);
	БДД.СохранитьВКонтекст("Команда", Команда);
	
	Команда.Выполнить();
	
КонецПроцедуры

//Вывод команды содержит ""
Процедура ВыводКомандыСодержит(Знач ОжидаемыйВыводКоманды) Экспорт
	Команда = БДД.ПолучитьИзКонтекста("Команда");
	
	ВыводКоманды = Команда.ПолучитьВывод();
	Ожидаем.Что(ВыводКоманды).Содержит(ОжидаемыйВыводКоманды);
	// ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ВыводКомандыСодержит> не реализован", "Не реализовано.");
КонецПроцедуры

//Я сообщаю вывод команды
Процедура ЯСообщаюВыводКоманды() Экспорт
	Команда = БДД.ПолучитьИзКонтекста("Команда");
	
	ВыводКоманды = Команда.ПолучитьВывод();
	Сообщить(ВыводКоманды);
	
КонецПроцедуры

//я включаю отладку библиотеки "commands"
Процедура ЯВключаюОтладкуБиблиотеки(Знач ИмяБиблиотеки) Экспорт
    Лог = Логирование.ПолучитьЛог("oscript.lib."+ИмяБиблиотеки);
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

//я выключаю отладку библиотеки "commands"
Процедура ЯВыключаюОтладкуБиблиотеки(Знач ИмяБиблиотеки) Экспорт
    Лог = Логирование.ПолучитьЛог("oscript.lib."+ИмяБиблиотеки);
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

//Я добавляю параметр "status" для команды
Процедура ЯДобавляюПараметрДляКоманды(Знач Параметр) Экспорт
	Команда = БДД.ПолучитьИзКонтекста("Команда");

	Команда.ДобавитьПараметр(Параметр);
КонецПроцедуры

//Код возврата команды равен 0
Процедура КодВозвратаКомандыРавен(Знач ОжидаемыйКодВозврата) Экспорт
	Команда = БДД.ПолучитьИзКонтекста("Команда");

	Ожидаем.Что(Команда.ПолучитьКодВозврата(), "Код возврата").Равно(ОжидаемыйКодВозврата);
КонецПроцедуры
